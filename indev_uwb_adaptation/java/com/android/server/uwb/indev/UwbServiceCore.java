/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.server.uwb.indev;

import android.annotation.NonNull;
import android.util.Log;


import com.android.server.uwb.data.UwbRangingData;
import com.android.server.uwb.data.UwbVendorUciResponse;
import com.android.server.uwb.info.UwbPowerStats;

import com.google.uwb.support.base.Params;
import com.google.uwb.support.fira.FiraControleeParams;

import java.util.Arrays;

/**
 * Uwb Service Core placeholder
 */
public class UwbServiceCore implements IUwbServiceListener {
    private static final String TAG = UwbServiceCore.class.getSimpleName();

    protected IUwbServiceListener mUwbServiceListener;
    private long mUwbServicePtr;

    public UwbServiceCore() {
        System.loadLibrary("uwb_adaptation_jni");
        nativeInit();
    }

    public long getUwbServicePtr() {
        return mUwbServicePtr;
    }

    public void setUwbServiceListener(IUwbServiceListener uwbServiceListener) {
        mUwbServiceListener = uwbServiceListener;
    }

    /**
     * Service reset notification
     *
     * @param success true if service reset was successful
     */
    public void onServiceResetReceived(boolean success) {
        Log.d(TAG, "onServiceResetReceived(" + success + ")");
        mUwbServiceListener.onServiceResetReceived(success);
    }

    /**
     * Device status changed notification
     *
     * @param deviceState new device state
     */
    public void onDeviceStatusNotificationReceived(int deviceState) {
        Log.d(TAG, "onDeviceStatusNotificationReceived(" + deviceState + ")");
        mUwbServiceListener.onDeviceStatusNotificationReceived(deviceState);
    }

    /**
     * Session status notification
     *
     * @param sessionId  Session id
     * @param state      State
     * @param reasonCode Reason Code
     */
    public void onSessionStatusNotificationReceived(long sessionId, int state, int reasonCode) {
        Log.d(TAG, "onSessionStatusNotificationReceived(" + sessionId + ", " + state + ", "
                + reasonCode
                + ")");
        mUwbServiceListener.onSessionStatusNotificationReceived(sessionId, state, reasonCode);
    }

    /**
     * Range data received notification
     *
     * @param sessionId Session id
     * @param rangeData Range data
     */
    public void onRangeDataNotificationReceived(long sessionId, UwbRangingData rangeData) {
        Log.d(TAG, "onRangeDataNotificationReceived(" + sessionId + ", " + rangeData + ")");
        mUwbServiceListener.onRangeDataNotificationReceived(sessionId, rangeData);
    }

    /**
     * Vendor UCI notification received
     *
     * @param gid     Group identifier
     * @param oid     Opcode identifier
     * @param payload Payload
     */
    public void onVendorUciNotificationReceived(int gid, int oid, byte[] payload) {
        Log.d(TAG, "onVendorUciNotificationReceived(" + gid + ", " + oid + ", " + Arrays.toString(
                payload) + ")");
        mUwbServiceListener.onVendorUciNotificationReceived(gid, oid, payload);
    }

    /**
     * Enable UWB
     *
     * @return : If this returns true, UWB is on
     */
    public synchronized boolean enable() {
        if (this.mUwbServicePtr != 0L) {
            return true;
        }
        this.mUwbServicePtr = nativeUwbServiceNew();
        return nativeEnable();
    }

    /**
     * Disable UWB
     *
     * @return : If this returns true, UWB is off
     */
    public synchronized boolean disable() {
        if (this.mUwbServicePtr == 0) {
            return true;
        }
        nativeDisable();
        nativeUwbServiceDestroy();
        this.mUwbServicePtr = 0L;
        return true;
    }

    /**
     * Creates the new ranging session with parameter session ID, type of the session
     * and given app config parameters.
     *
     * @param sessionId       : Session ID is 4 Octets unique random number generated by application
     * @param sessionType     : Type of session 0x00: Ranging session 0x01: Data transfer 0x02-0x9F:
     *                        RFU
     *                        0xA0-0xCF: Reserved for Vendor Specific use case 0xD0: Device Test
     *                        Mode
     *                        0xD1-0xDF: RFU 0xE0-0xFF: Vendor Specific use
     * @param appConfigParams : App configuration parameters
     * @return : Success or failure
     */
    public boolean initSession(int sessionId, byte sessionType, Params appConfigParams) {
        return nativeInitSession(sessionId, sessionType, appConfigParams);
    }

    /**
     * De-initializes the session.
     *
     * @param sessionId : Session ID for which session to be de-initialized
     * @return : Success or failure
     */
    public boolean deinitSession(int sessionId) {
        return nativeDeinitSession(sessionId);
    }

    /**
     * Starts ranging for the session
     *
     * @param sessionId : Session ID for which ranging shall start
     * @return : App config params
     */
    public boolean startRanging(int sessionId) {
        return nativeStartRanging(sessionId);
    }

    /**
     * Stops ranging for the session
     *
     * @param sessionId : Stop the requested ranging session.
     * @return : Success or failure
     */
    public boolean stopRanging(int sessionId) {
        return nativeStopRanging(sessionId);
    }

    /**
     * Reconfigure the parameters of the session
     *
     * @param sessionId : ID of the Session to be reconfigured
     * @param params    : New params
     * @return : Success or failure
     */
    public boolean reconfigure(int sessionId, Params params) {
        return nativeReconfigure(sessionId, params);
    }

    /**
     * Update Multicast list for the requested UWB session
     *
     * @param sessionId  : Session ID to which multicast list to be updated
     * @param action     : Update the multicast list by adding or removing
     *                   0x00 - Adding
     *                   0x01 - removing
     * @param controlees : Controlees
     * @return : Success or failure
     */
    public boolean updateControllerMulticastList(int sessionId, int action,
            FiraControleeParams controlees) {
        return nativeUpdateControllerMulticastList(sessionId, (byte) action, controlees);
    }

    /**
     * Set country code.
     *
     * @param countryCode : 2 char ISO country code
     * @return : Success or failure
     */
    public boolean setCountryCode(byte[] countryCode) {
        Log.i(TAG, "setCountryCode: " + new String(countryCode));
        return nativeSetCountryCode(countryCode);
    }

    /**
     * Send
     *
     * @param gid     : Group Identifier
     * @param oid     : Opcode Identifier
     * @param payload : Payload
     */
    @NonNull
    public UwbVendorUciResponse sendVendorCommand(int gid, int oid, byte[] payload) {
        return nativeSendVendorCmd(gid, oid, payload);
    }

    /**
     * Retrieves power related stats
     */
    public UwbPowerStats getPowerStats() {
        return nativeGetPowerStats();
    }

    private native void nativeInit();

    private native long nativeUwbServiceNew();

    private native void nativeUwbServiceDestroy();

    private native boolean nativeEnable();

    private native boolean nativeDisable();

    private native boolean nativeInitSession(int sessionId, byte sessionType,
            Params appConfigParams);

    private native boolean nativeDeinitSession(int sessionId);

    private native boolean nativeStartRanging(int sessionId);

    private native boolean nativeStopRanging(int sessionId);

    private native boolean nativeReconfigure(int sessionId, Params appConfigParams);

    private native boolean nativeUpdateControllerMulticastList(int sessionId,
            byte updateMulticastListAction, FiraControleeParams controlees);

    private native boolean nativeSetCountryCode(byte[] countryCode);

    private native UwbPowerStats nativeGetPowerStats();

    private native UwbVendorUciResponse nativeSendVendorCmd(int gid, int oid, byte[] payload);

}
